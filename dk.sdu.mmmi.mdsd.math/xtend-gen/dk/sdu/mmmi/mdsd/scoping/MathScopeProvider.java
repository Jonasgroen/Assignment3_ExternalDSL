/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping;

import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.Arrays;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MathScopeProvider extends AbstractMathScopeProvider {
  public Object getScope(final /* EObject */Object context, final /* EReference */Object reference) {
    throw new Error("Unresolved compilation problems:"
      + "\nscopeForEObject cannot be resolved");
  }
  
  protected Object _scopeForEObject(final /* EObject */Object context, final /* EReference */Object reference) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method getScope(EObject, EReference) is undefined for the type AbstractMathScopeProvider");
  }
  
  protected Object _scopeForEObject(final VariableUse varUse, final /* EReference */Object reference) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method scopeForVarUse(EObject) from the type MathScopeProvider refers to the missing type IScope");
  }
  
  public /* IScope */Object scopeForVarUse(final /* EObject */Object context) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field Scopes is undefined"
      + "\nThe method or field Scopes is undefined"
      + "\neContainer cannot be resolved"
      + "\nbinding cannot be resolved"
      + "\n== cannot be resolved"
      + "\nscopeForVarUse cannot be resolved"
      + "\nscopeFor cannot be resolved"
      + "\nscopeForVarUse cannot be resolved"
      + "\nscopeFor cannot be resolved"
      + "\nvariables cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\n!= cannot be resolved"
      + "\nscopeForVarUse cannot be resolved");
  }
  
  public Object scopeForEObject(final VariableUse varUse, final EReference reference) {
    if (varUse != null) {
      return _scopeForEObject(varUse, reference);
    } else if (varUse != null) {
      return _scopeForEObject(varUse, reference);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(varUse, reference).toString());
    }
  }
}
